Gnocis tutorial
==================================

Bj√∏rn Bredesen, 2018-2019



## Set-up

Here, we will train a PREdictor (Ringrose *et al.* 2003) model on the Kahn *et al.* (2014) Polycomb targets, and predict candidate PREs genome-wide. We will go through all steps that must be executed, from loading a General Feature Format (GFF) file with genomic coordinates for Polycomb targets, extract the underlying sequences, train the model, calibrate the threshold, and predict candidate PREs genome-wide.

This tutorial assumes that Gnocis has been successfully installed.

We will use the *Drosophila melanogaster* genome throughout this tutorial. 
 * **Either**: Download and unpack the genome sequence to the folder with the tutorial data: ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r5.57_FB2014_03/fasta/dmel-all-chromosome-r5.57.fasta.gz
 * **Or**: In a Linux terminal, navigate to the folder with the tutorial data, and execute the following command: `wget ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r5.57_FB2014_03/fasta/dmel-all-chromosome-r5.57.fasta.gz && gunzip dmel-all-chromosome-r5.57.fasta.gz`


## Preparing training data using Gnocis

Download the Gnocis repository, and in a terminal, navigate to the Gnocis `tutorial/` folder. Open the Python3 Read-Eval Print Loop (REPL) by running `python3`.

Run:
```python
# Import the library
import gnocis as cis

# Load the Kahn et al. (2014) Polycomb targets
Kahn2014Rgn = cis.loadGFF('Kahn2014.GFF')

# Resize and extract from genome
Kahn2014Seq = Kahn2014Rgn\
          .getRandomlyRecentered(3000)\
          .extract('dmel-all-chromosome-r5.57.fasta')

# Split into independent training and test sets
tpos, vpos = Kahn2014Seq.getRandomSplit()
```

This loads the Kahn *et al.* (2014) Polycomb target regions, resizes them to 3kb each, and extracts the underlying sequences from the fruit fly genome. Information about the loaded and processed data can be output by running the following.

Run (optional):
```python
Kahn2014Rgn.printStatistics()
tpos.printStatistics()
```

We will now generate negative training sequences. To this end, we train a 4th order Markov chain on the PREs, as we did previously (Bredesen *et al.* 2019). Sequences generated by a 4th order Markov chain trained on PREs retains motif-enrichment, but lack the pairing that is characteristic of PREs.

Run:
```python
MCPRE = cis.generatorMarkovChain(trainingSequences = Kahn2014Seq, degree = 4)
tneg = MCPRE.generateSet(n = len(tpos), length = len(tpos[0]))
vneg = MCPRE.generateSet(n = len(vpos)*100, length = len(vpos[0]))
```

This trains the Markov chain a Markov chain on the Kahn *et al.* (2014) set, and randomly generates a set of as many sequences as are in the Kahn *et al.* (2014) set, with the same length as the first sequence.

Run (optional):
```python
tneg.printStatistics()
tneg[0].seq
```


## Training a basic model of *cis*-regulatory module (CRM) sequences

Run:
```python
mdl = cis.trainPREdictorModel(motifs = cis.motifs.getRingrose2003Motifs_GTGT(),
                              positives = tpos,
                              negatives = tneg)
```

This trains a PREdictor model, using the positives and negatives, and the motifs used in Bredesen *et al.* (2019). To manually specify motifs, the following syntax is used:

Run:
```python
mdlC = cis.trainPREdictorModel(motifs = cis.motifs('Custom motif set', [
                                  cis.IUPACMotif('GAF', 'GAGAG', 0),
                                  cis.IUPACMotif('Z', 'YGAGYG', 0),
                                  cis.IUPACMotif('Grh', 'TGTTTTTT', 0),
                                  cis.IUPACMotif('Dsp1', 'GAAAA', 0),
                               ]),
                               positives = tpos,
                               negatives = tneg)
```

The model weights can be inspected.

Run (optional):
```python
mdl.weights
mdlC.weights
```


## Predicting genome-wide

In order to make genome-wide predictions, we need to calibrate the threshold of our model. After calibrating, we can apply our model for genome-wide prediction.

```python
# Calibrate threshold
mdl.calibrateGenomewidePrecision(positives = vpos,
                                    genome = 'dmel-all-chromosome-r5.57.fasta',
                                    factor = 0.5,
                                    precision = 0.8,
                                    bgModelOrder = 4)

# Predict candidate PREs genome-wide
predictions = mdl.predict('dmel-all-chromosome-r5.57.fasta')

# Save predictions to GFF-file
predictions.saveGFF('predictions.GFF')
```

Calibration can take some time. However, on multi-core systems, parallel processing can be enabled by by following command.

Run (optional):
```python
cis.setNCores(4)
```


The entire training, calibration and prediction procedure can be written more compactly, as

```python
cis.trainPREdictorModel(motifs = cis.motifs.getRingrose2003Motifs_GTGT(),
                              positives = tpos,
                              negatives = tneg)\
         .calibrateGenomewidePrecision(positives = Kahn2014Seq,
                              genome = 'dmel-all-chromosome-r5.57.fasta',
                              factor = 0.5,
                              precision = 0.8,
                              bgModelOrder = 4)\
         .predict('dmel-all-chromosome-r5.57.fasta')\
         .saveGFF('predictions.GFF')
```


## Preparing a training set based on genome-wide experimental data

When we trained models in the last sections, we used published sets of Polycomb targets. In this section, we will define Polycomb targets based on data from modENCODE, in order to train our model.
We have downloaded genome-wide peaks for three *D. melanogaster* Polycomb group proteins and one histone modification:
 * Pc - Source: ftp://data.modencode.org/D.melanogaster/Non-TF-Chromatin-binding-factor/ChIP-seq/computed-peaks_gff3/Pc%3ADevelopmental-Stage=Embryos-14-16-hr-OR%23Strain=Oregon-R%3AChIP-seq%3ARep-1%3A%3ADmel_r5.32%3AmodENCODE_3957%3A816.gff3.gz
 * Psc - Source: source URL: ftp://data.modencode.org/D.melanogaster/Non-TF-Chromatin-binding-factor/ChIP-seq/computed-peaks_gff3/Psc%3ADevelopmental-Stage=Embryos-14-16-hr-OR%23Strain=Oregon-R%3AChIP-seq%3ARep-1%3A%3ADmel_r5.32%3AmodENCODE_3960%3A1817.gff3.gz
 * dRING - Source: ftp://data.modencode.org/D.melanogaster/Non-TF-Chromatin-binding-factor/ChIP-seq/computed-peaks_gff3/dRING%3ADevelopmental-Stage=Embryos-14-16-hr-OR%23Strain=Oregon-R%3AChIP-seq%3ARep-1%3A%3ADmel_r5.32%3AmodENCODE_5071%3A1819.gff3.gz
 * H3K27me3 - Source URL: tp://data.modencode.org/D.melanogaster/Histone-Modification/ChIP-seq/computed-peaks_gff3/H3K27me3%3ADevelopmental-Stage=Embryos-14-16-hr-OR%23Strain=Oregon-R%3AChIP-seq%3ARep-1%3A%3ADmel_r5.32%3AmodENCODE_3955%3A1820.gff3.gz

These are included with the tutorial, considered as fair use for example material. All credit for these sets belongs to Karpen G. *et al.* and modENCODE.

We will now prepare candidate Polycomb targets based on these sets, using the `biomarkers` class in gnocis.

Run:
```python
PcG = cis.biomarkers(name = 'PcG', regionSets = [
	cis.loadGFFGZ('Pc.gff3.gz').getRenamed('Pc'),
	cis.loadGFFGZ('Psc.gff3.gz').getRenamed('Psc'),
	cis.loadGFFGZ('dRING.gff3.gz').getRenamed('dRING'),
	cis.loadGFFGZ('H3K27me3.gff3.gz').getRenamed('H3K27me3')
])
```

Run (optional):
```python
PcG
PcGTargets
```

Output:
```
Biomarker set<PcG (H3K27me3 (1486 regions - 1 sets); Pc (1405 regions - 1 sets); Psc (2628 regions - 1 sets); dRING (3473 regions - 1 sets))>
```



-------------------------------------------------

## References

 * Bredesen *et al.* 2019: https://academic.oup.com/nar/article/47/15/7781/5538007
 * Kahn *et al.* 2014: https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1004495
 * FlyBase - : https://academic.oup.com/nar/article/41/D1/D751/1051942
 * Ringrose *et al.* 2003: https://www.sciencedirect.com/science/article/pii/S153458070300337X
 * ModENCODE: 

